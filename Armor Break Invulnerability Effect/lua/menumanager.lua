_G.Armor_Break_Invulnerability_Effect = _G.Armor_Break_Invulnerability_Effect or {}
Armor_Break_Invulnerability_Effect._path = ModPath
Armor_Break_Invulnerability_Effect.data_path = SavePath .. 'Armor_Break_Invulnerability_Effect.txt'
Armor_Break_Invulnerability_Effect.effect_timer = 0
Armor_Break_Invulnerability_Effect.default_settings = {
	enabled = true,
	color = "C71585",
	palettes = { --for ColorPicker
		"ADFF2F",
		"7FFF00",
		"7CFC00",
		"00FF00",
		"32CD32",
		"00FA9A",
		"3CB371",
		"228B22",
		"008000",
		"9ACD32",
		"556B2F",
		"00FFFF",
		"AFEEEE",
		"40E0D0",
		"7FFFD4",
		"C71585",
		"CD5C5C",
		"F08080",
		"FA8072",
		"E9967A",
		"FFA07A",
		"DC143C",
		"FF0000",
		"B22222",
		"8B0000"
	}
}
Armor_Break_Invulnerability_Effect.settings = table.deep_map_copy(Armor_Break_Invulnerability_Effect.default_settings)

function Armor_Break_Invulnerability_Effect:set_colorpicker_menu(menu)
	Armor_Break_Invulnerability_Effect._colorpicker = menu
end

function Armor_Break_Invulnerability_Effect.clbk_show_colorpicker_with_callbacks(color, changed_callback, done_callback)
	Armor_Break_Invulnerability_Effect._colorpicker:Show({color = color,changed_callback = changed_callback,done_callback = done_callback,palettes = Armor_Break_Invulnerability_Effect:GetPaletteColors(),blur_bg_x = 750})
end

function Armor_Break_Invulnerability_Effect:GetPaletteColors()
	local result = {}
	for i,hex in ipairs(self.settings.palettes) do 
		result[i] = Color(hex)
	end
	return result
end

function Armor_Break_Invulnerability_Effect:SetPaletteCodes(tbl)
	if type(tbl) == "table" then 
		for i,color in ipairs(tbl) do 
			self.settings.palettes[i] = color:to_hex()
		end
	else
		self:log("Error: SetPaletteCodes(" .. tostring(tbl) .. ") Bad palettes table from ColorPicker callback")
	end
end

function Armor_Break_Invulnerability_Effect:IsEnabled()
	return self.settings.enabled
end

function Armor_Break_Invulnerability_Effect:DebugEnabled() 
	return false
end

function Armor_Break_Invulnerability_Effect:log(a,...)
	if not self:DebugEnabled() then 
		return
	end
	if Console then
		return Console:log(a,...)
	else
		return log("[Armor_Break_Invulnerability_Effect] " .. tostring(a))
	end
end

function Armor_Break_Invulnerability_Effect:Save()
	local file = io.open(self.data_path,"w+")
	if file then
		file:write(json.encode(self.settings))
		file:close()
	end
end

function Armor_Break_Invulnerability_Effect:Load()
	local file = io.open(self.data_path, "r")
	if (file) then
		for k, v in pairs(json.decode(file:read('*all'))) do
			self.settings[k] = v
		end
	else
		self:Save()
	end
end

function Armor_Break_Invulnerability_Effect:LoadTextures()
	for _, file in pairs(file.GetFiles(Armor_Break_Invulnerability_Effect._path.. "assets/guis/textures/")) do
		DB:create_entry(Idstring("texture"), Idstring("assets/guis/textures/".. file:gsub(".texture", "")), Armor_Break_Invulnerability_Effect._path.. "assets/guis/textures/".. file)
	end
end

Hooks:Add("LocalizationManagerPostInit", "LocalizationManagerPostInit_Armor_Break_Invulnerability_Effect", function( loc )
	if file.DirectoryExists(Armor_Break_Invulnerability_Effect._path .. "loc/") then
		for _, filename in pairs(file.GetFiles(Armor_Break_Invulnerability_Effect._path .. "loc/")) do
			local str = filename:match('^(.*).json$')
			if str and Idstring(str) and Idstring(str):key() == SystemInfo:language():key() then
				loc:load_localization_file(Armor_Break_Invulnerability_Effect._path .. "loc/" .. filename)
				break
			end
		end
	end
	loc:load_localization_file(Armor_Break_Invulnerability_Effect._path .. "loc/english.json", false)
end)

Hooks:Add( "MenuManagerInitialize", "MenuManagerInitialize_Armor_Break_Invulnerability_Effect", function(menu_manager)
	MenuCallbackHandler.Armor_Break_Invulnerability_Effect_toggle = function(self, item)
		Armor_Break_Invulnerability_Effect.settings[item:name()] = (item:value() == "on")
		Armor_Break_Invulnerability_Effect:Save()
	end
	
	MenuCallbackHandler.Armor_Break_Invulnerability_Effect_value = function(self, item)
		Armor_Break_Invulnerability_Effect.settings[item:name()] = item:value()
		Armor_Break_Invulnerability_Effect:Save()
	end
	MenuCallbackHandler.callback_Armor_Break_Invulnerability_Effect_color = function(self, item)
		local function clbk_colorpicker (color, palettes, success)
			--save color to settings
			if success then 
				Armor_Break_Invulnerability_Effect.settings.color = color:to_hex()
				Armor_Break_Invulnerability_Effect:Save()
			end
			--save palette swatches to settings
			if palettes then 
				Armor_Break_Invulnerability_Effect:SetPaletteCodes(palettes)
			end
		end
		Armor_Break_Invulnerability_Effect.clbk_show_colorpicker_with_callbacks(Color(Armor_Break_Invulnerability_Effect.settings.color), clbk_colorpicker, clbk_colorpicker)
	end
	

	MenuCallbackHandler.callback_Armor_Break_Invulnerability_Effect_back = function(self,item)
		Armor_Break_Invulnerability_Effect:Save()
	end

	Armor_Break_Invulnerability_Effect:Load()
	Armor_Break_Invulnerability_Effect._colorpicker = Armor_Break_Invulnerability_Effect._colorpicker or (ColorPicker and ColorPicker:new("Armor_Break_Invulnerability_Effect_colorpicker_menu_id",colorpicker_data,callback(Armor_Break_Invulnerability_Effect,Armor_Break_Invulnerability_Effect,"set_colorpicker_menu")))

	-- Main Menu
	Hooks:Add("MenuManagerSetupCustomMenus", "Base_SetupCustomMenus_Json_Armor_Break_Invulnerability_Effect_main_menu", function( menu_manager, nodes)
		MenuHelper:NewMenu( "Armor_Break_Invulnerability_Effect_main_menu" )
	end)

	Hooks:Add("MenuManagerBuildCustomMenus", "Base_BuildCustomMenus_Json_Armor_Break_Invulnerability_Effect_main_menu", function(menu_manager, nodes)
		local parent_menu = "blt_options"
		local menu_id = "Armor_Break_Invulnerability_Effect_main_menu"
		local menu_name = "Armor_Break_Invulnerability_Effect_main_menu_title"
		local menu_desc = "Armor_Break_Invulnerability_Effect_main_menu_desc"

		local data = {
			focus_changed_callback = nil,
			back_callback = "callback_Armor_Break_Invulnerability_Effect_back",
			area_bg = nil,
		}
		nodes[menu_id] = MenuHelper:BuildMenu( menu_id, data )

		MenuHelper:AddMenuItem( nodes[parent_menu], menu_id, menu_name, menu_desc, nil )
	end)
end)

Hooks:Add("MenuManagerPopulateCustomMenus", "Base_PopulateCustomMenus_Json_Armor_Break_Invulnerability_Effect_main_menu", function(menu_manager, nodes)
	MenuHelper:AddToggle({
		id = "enabled",
		title = "Armor_Break_Invulnerability_Effect_enabled_title",
		desc = "Armor_Break_Invulnerability_Effect_enabled_desc",
		callback = "Armor_Break_Invulnerability_Effect_toggle",
		value = Armor_Break_Invulnerability_Effect.settings.enabled,
		menu_id = "Armor_Break_Invulnerability_Effect_main_menu",
		priority = 3
	})
	MenuHelper:AddDivider({
		id = "Armor_Break_Invulnerability_Effect_divider_0",
		size = 24,
		menu_id = "Armor_Break_Invulnerability_Effect_main_menu",
		priority = 2
	})
	if Armor_Break_Invulnerability_Effect._colorpicker then
		MenuHelper:AddButton({
			id = "Armor_Break_Invulnerability_Effect_color_ColorPicker",
			title = "Armor_Break_Invulnerability_Effect_color_title",
			desc = "Armor_Break_Invulnerability_Effect_color_desc",
			callback = "callback_Armor_Break_Invulnerability_Effect_color",
			menu_id = "Armor_Break_Invulnerability_Effect_main_menu",
			priority = 1
		})
	elseif not _G.ColorPicker then
		MenuHelper:AddInput({
			id = "color",
			title = "Armor_Break_Invulnerability_Effect_color_input_title",
			desc = "Armor_Break_Invulnerability_Effect_color_input_desc",
			callback = "Armor_Break_Invulnerability_Effect_value",
			value = Armor_Break_Invulnerability_Effect.settings.color,
			menu_id = "Armor_Break_Invulnerability_Effect_main_menu",
			priority = 1
		})
	end
end)

Armor_Break_Invulnerability_Effect:LoadTextures()